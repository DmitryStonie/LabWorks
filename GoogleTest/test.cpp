#include "pch.h"
#include "../BigInt/BigInt.h"
#include <string>
#include <exception>


TEST(TestNumbers, StrInitializationTransition) {
	BigInt n1("115792089237316195423570985008687907853269984665640564039457584007913129639936");
	BigInt n2("-115792089237316195423570985008687907853269984665640564039457584007913129639935");
	BigInt n3("48563425834895345345");
	BigInt n4("-3298473482");
	BigInt n5("0");
	BigInt n6("1");
	BigInt n7("-985008687907853269984665640564039457584007913129639936");
	BigInt n8("-1");
	BigInt n9("879324646981383148528937920123692112527683879408418600540147014384631813983816337931163601353542422424271391313138793246469813831485289379201236921125276838794084186005401470143846318139838163379311636013535424224242713913131387932464698138314852893792012369211252768387940841860054014701438463181398381633793116360135354242242427139131313");
	ASSERT_EQ(string(n1), "115792089237316195423570985008687907853269984665640564039457584007913129639936");
	ASSERT_EQ(string(n2), "-115792089237316195423570985008687907853269984665640564039457584007913129639935");
	ASSERT_EQ(string(n3), "48563425834895345345");
	ASSERT_EQ(string(n4), "-3298473482");
	ASSERT_EQ(string(n5), "0");
	ASSERT_EQ(string(n6), "1");
	ASSERT_EQ(string(n7), "-985008687907853269984665640564039457584007913129639936");
	ASSERT_EQ(string(n8), "-1");
	ASSERT_EQ(string(n9), "879324646981383148528937920123692112527683879408418600540147014384631813983816337931163601353542422424271391313138793246469813831485289379201236921125276838794084186005401470143846318139838163379311636013535424224242713913131387932464698138314852893792012369211252768387940841860054014701438463181398381633793116360135354242242427139131313");
	EXPECT_THROW(BigInt(""), std::invalid_argument);
	EXPECT_THROW(BigInt("908123d"), std::invalid_argument);
}
TEST(TestNumbers, PlusMinusIncDec) {
	BigInt n1("115792089237316195423570985008687907853269984665640564039457584007913129639936");
	BigInt n2("115792089237316195423570985008687907853269984665640564039457584007913129639935");
	BigInt n3("4294967295");
	BigInt n4("1");
	BigInt n5("0");
	BigInt n6("-985008687907853269984665640564039457584007913129639936");
	BigInt n7("-731619542357098500868");
	BigInt n8("731619542357098500868");
	ASSERT_EQ((string)(n1 + n2), "231584178474632390847141970017375815706539969331281128078915168015826259279871");
	ASSERT_EQ((string)(n3 + n4), "4294967296");
	ASSERT_EQ((string)(n5 + n6), "-985008687907853269984665640564039457584007913129639936");
	ASSERT_EQ((string)(n7 + n8), "0");
	ASSERT_EQ((string)(n8 - n8), "0");
	ASSERT_EQ((string)(n5 - n5), "0");
	ASSERT_EQ((string)(n6 + n8), "-985008687907853269984665640564038725964465556031139068");
	ASSERT_EQ((string)(n6 - n8), "-985008687907853269984665640564040189203550270228140804");
	ASSERT_EQ((string)(n1 - n2), "1");
	ASSERT_EQ((string)(n2 - n1), "-1");
	ASSERT_EQ((string)(n6 + n7), "-985008687907853269984665640564040189203550270228140804");
}

TEST(TestNumbers, DivisionCarry) {
	BigInt n1("115792089237316195423570985008687907853269984665640564039457584007913129639936");
	BigInt n2("115792089237316195423570985008687907853269984665640564039457584007913129639935");
	BigInt n3("48563425834895345345");
	BigInt n4("-3298473482");
	BigInt n5("0");
	BigInt n6("1");
	BigInt n7("84375325489735983256294386932498238478237847887432872437843243432304782348934235");
	BigInt n8("34721554632468263492341263481632479273423423586324632646981234214");
	BigInt n9("-384567832654874362745736456324986324");
	BigInt n10("-1");
	BigInt n11("879324646981383148528937920123692112527683879408418600540147014384631813983816337931163601353542422424271391313138793246469813831485289379201236921125276838794084186005401470143846318139838163379311636013535424224242713913131387932464698138314852893792012369211252768387940841860054014701438463181398381633793116360135354242242427139131313");
	BigInt n12("495898724378452435435244335543545352314364958987243784524354352443355435453523143635648415356432533435633554353215341255343432635443514311353545435746213433315343549589872437845243543524433554354535231436356484153564325334356335543532153412553434326354435143113535454357463568493547851532134333153435");
	BigInt a;
	BigInt n13("0");
	ASSERT_EQ(string(n1 / n2), "1");
	ASSERT_EQ(string(n2 / n1), "0");
	ASSERT_EQ(string(n7 / n8), "2430056095784267");
	ASSERT_EQ(string(n8 / n7), "0");
	ASSERT_EQ(string(n1 / n3), "2384347628830451279510032201187672633275299720941298210861");
	ASSERT_EQ(string(n1 / n8), "3334876288316");
	ASSERT_EQ(string(n1 / n4), "-35104750688220386736936933485611665697565848936432517919347512282929");
	ASSERT_EQ(string(n2 / n4), "-35104750688220386736936933485611665697565848936432517919347512282929");
	ASSERT_EQ(string(n1 / n6), "115792089237316195423570985008687907853269984665640564039457584007913129639936");
	ASSERT_EQ(string(n5 / n8), "0");
	ASSERT_EQ(string(n5 / n6), "0");
	ASSERT_EQ(string(n8 / n9), "-90287204711759375242373336699");
	ASSERT_EQ(string(n2 / n9), "-301096658131654946388580377003362808951457");
	ASSERT_EQ(string(n9 / n4), "116589639041662109911040497");	//two negative
	ASSERT_EQ(string(n1 / n6), "115792089237316195423570985008687907853269984665640564039457584007913129639936");
	ASSERT_EQ(string(n9 / n6), "-384567832654874362745736456324986324");
	ASSERT_EQ(string(n11 / n12), "1773194008682937360096325807734413764541");
	EXPECT_THROW(n13 / n13, std::exception);
	//remainder
	ASSERT_EQ(string(n1 % n2), "1");
	ASSERT_EQ(string(n2 % n1), "115792089237316195423570985008687907853269984665640564039457584007913129639935");
	ASSERT_EQ(string(n7 % n8), "25175722526184608305982944626263387972079634451207801516405623097");
	ASSERT_EQ(string(n8 % n7), "34721554632468263492341263481632479273423423586324632646981234214");
	ASSERT_EQ(string(n1 % n3), "7926853487904847891");
	ASSERT_EQ(string(n1 % n8), "29217326566064556251589933482877313424823701450607330224141996312");
	ASSERT_EQ(string(n1 % n4), "2541851158");
	ASSERT_EQ(string(n2 % n4), "2541851157");
	ASSERT_EQ(string(n1 % n6), "0");
	ASSERT_EQ(string(n5 % n8), "0");
	ASSERT_EQ(string(n5 % n6), "0");
	ASSERT_EQ(string(n8 % n9), "88133687322820476962114173558929738");
	ASSERT_EQ(string(n2 % n9), "103286929778663501949872072824765867");
	ASSERT_EQ(string(n9 % n4), "2057614230");	//two negative - reminder must be positive
	ASSERT_EQ(string(n1 % n6), "0");
	ASSERT_EQ(string(n9 % n6), "0");
	ASSERT_EQ(string(n11 % n12), "265643502111550219600366689957302609582303773525446452110544591223808511226950627737552552040549845336681302256345411047153060292884897810365480079155764798565549771959042675228395134800912104445579712127530280997564973872607212199248984537965834570487487908845445637590638542286542801468565023782978");
}
TEST(TestNumbers, BitOperations) {
	BigInt n1("115792089237316195423570985008687907853269984665640564039457584007913129639936");
	BigInt n2("115792089237316195423570985008687907853269984665640564039457584007913129639935");
	BigInt n3("0");
	BigInt n4("1");
	BigInt n5("-1");
	BigInt n6("-89435783245498613274871368481327498234632498812832832832734278432783274");
	BigInt n7("84375325489735983256294386932498238478237847887432872437843243432304782348934235");
	BigInt n8("34721554632468263492341263481632479273423423586324632646981234214");
	ASSERT_EQ(string(n1 | n2), "231584178474632390847141970017375815706539969331281128078915168015826259279871");
	ASSERT_EQ(string(n3 | n6), "-89435783245498613274871368481327498234632498812832832832734278432783274");
	ASSERT_EQ(string(n3 | n7), "84375325489735983256294386932498238478237847887432872437843243432304782348934235");
	ASSERT_EQ(string(n1 | n4), "115792089237316195423570985008687907853269984665640564039457584007913129639937");
	ASSERT_EQ(string(n6 | n6), "-89435783245498613274871368481327498234632498812832832832734278432783274");
	ASSERT_EQ(string(n6 | n7), "-432412629769624314062819024778646404336021291281613480748311678198689");
	ASSERT_EQ(string(n6 | n8), "-89435783090813368129955093206828224693051166093791002601440886162215306");
	ASSERT_EQ(string(n7 | n7), "84375325489735983256294386932498238478237847887432872437843243432304782348934235");
	ASSERT_EQ(string(n7 | n8), "84375325489736011393796806045217782032469795050245194543654912414631866016988799");
	ASSERT_EQ(string(n8 | n8), "34721554632468263492341263481632479273423423586324632646981234214");
	ASSERT_EQ(string(n1 & n2), "0");
	ASSERT_EQ(string(n1 & n6), "115792089237316195423570985008687907853269984665640564039457584007913129639936");
	ASSERT_EQ(string(n1 & n7), "0");
	ASSERT_EQ(string(n1 & n4), "0");
	ASSERT_EQ(string(n6 & n6), "-89435783245498613274871368481327498234632498812832832832734278432783274");
	ASSERT_EQ(string(n6 & n7), "84375325400732612640565397971689689021688996057136394916292024080318815594349650");
	ASSERT_EQ(string(n6 & n8), "34566869387323347217066764208090897940704381756093339254710666246");
	ASSERT_EQ(string(n7 & n7), "84375325489735983256294386932498238478237847887432872437843243432304782348934235");
	ASSERT_EQ(string(n7 & n8), "6584052213355543948787031534469666951317611917342305563313179650");
	ASSERT_EQ(string(n8 & n8), "34721554632468263492341263481632479273423423586324632646981234214");
	ASSERT_EQ(string(n1 ^ n2), "231584178474632390847141970017375815706539969331281128078915168015826259279871");
	ASSERT_EQ(string(n1 ^ n6), "-115792178673099440922184259880056389180768219298139376872290416742191562423210");
	ASSERT_EQ(string(n1 ^ n7), "84491117578973299451717957917506926386091117872098513001882701016312695478574171");
	ASSERT_EQ(string(n1 ^ n4), "115792089237316195423570985008687907853269984665640564039457584007913129639937");
	ASSERT_EQ(string(n6 ^ n6), "0");
	ASSERT_EQ(string(n6 ^ n7), "-84375325401165025270335022285752508046467642461472416207573637561067127272548339");
	ASSERT_EQ(string(n6 ^ n8), "-89435817657682755453302310273592432783949106798172758694780140872881552");
	ASSERT_EQ(string(n7 ^ n7), "0");
	ASSERT_EQ(string(n7 ^ n8), "84375325489736004809744592689673833245438260580578243226042995072326302703809149");
	ASSERT_EQ(string(n8 ^ n8), "0");
	ASSERT_EQ(string(~n1), "-115792089237316195423570985008687907853269984665640564039457584007913129639937");
	ASSERT_EQ(string(~n2), "-115792089237316195423570985008687907853269984665640564039457584007913129639936");
}

TEST(TestNumbers, BoolOperations) {
	BigInt n1("115792089237316195423570985008687907853269984665640564039457584007913129639936");
	BigInt n2("115792089237316195423570985008687907853269984665640564039457584007913129639935");
	BigInt n3("48563425834895345345");
	BigInt n4("-3298473482");
	BigInt n5("0");
	BigInt n6("1");
	BigInt n7("115792089237316195423570985008687907853269984665640564039457584007913129639935");
	BigInt n8("-115792089237316195423570985008687907853269984665640564039457584007913129639935");
	BigInt n9("-115792089237316195423570985008687907853269984665640564039457584007913129639936");
	ASSERT_EQ(n1 > n2, 1);
	ASSERT_EQ(n1 < n2, 0);
	ASSERT_EQ(n1 >= n2, 1);
	ASSERT_EQ(n1 <= n2, 0);
	ASSERT_EQ(n1 == n2, 0);
	ASSERT_EQ(n2 == n2, 1);
	ASSERT_EQ(n5 == n5, 1);
	ASSERT_EQ(n6 == n6, 1);
	ASSERT_EQ(n6 > n5, 1);
	ASSERT_EQ(n5 > n6, 0);
	ASSERT_EQ(n2 == n7, 1);
	ASSERT_EQ(n5 == n7, 0);
	ASSERT_EQ(n3 <= n7, 1);
	ASSERT_EQ(n4 <= n5, 1);
	ASSERT_EQ(n8 <= n9, 0);
	ASSERT_EQ(n9 > n8, 0);
	ASSERT_EQ(n8 > n9, 1);
	ASSERT_EQ(n8 == n9, 0);
	ASSERT_EQ(n7 > n9, 1);
}

TEST(TestNumbers, Multiple) {
	BigInt n1("115792089237316195423570985008687907853269984665640564039457584007913129639936");
	BigInt n2("115792089237316195423570985008687907853269984665640564039457584007913129639935");
	BigInt n3("4294967295");
	BigInt n4("1");
	BigInt n5("0");
	BigInt n6("-985008687907853269984665640564039457584007913129639936");
	BigInt n7("-731619542357098500868");
	BigInt n8("731619542357098500868");
	BigInt n9("-1");
	BigInt n10("-115792089237316195423570985008687907853269984665640564039457584007913129639935");
	ASSERT_EQ((string)(n1 * n2), "13407807929942597099574024998205846127479365820592393377723561443721764030073431184712636981971479856705023170278632780869088242247907112362425735876444160");
	ASSERT_EQ((string)(n3 * n4), "4294967295");
	ASSERT_EQ((string)(n5 * n6), "0");
	ASSERT_EQ((string)(n1 * n5), "0");
	ASSERT_EQ((string)(n5 * n1), "0");
	ASSERT_EQ((string)(n6 * n5), "0");
	ASSERT_EQ((string)(n5 * n5), "0");
	ASSERT_EQ((string)(n6 * n7), "720651605464909673383233505008234931221187716181932055550872907282223464448");
	ASSERT_EQ((string)(n6 * n8), "-720651605464909673383233505008234931221187716181932055550872907282223464448");
	ASSERT_EQ((string)(n1 * n4), "115792089237316195423570985008687907853269984665640564039457584007913129639936");
	ASSERT_EQ((string)(n1 * n9), "-115792089237316195423570985008687907853269984665640564039457584007913129639936");
	ASSERT_EQ((string)(n1 * n4), "115792089237316195423570985008687907853269984665640564039457584007913129639936");
	ASSERT_EQ((string)(n4 * n1), "115792089237316195423570985008687907853269984665640564039457584007913129639936");
	ASSERT_EQ((string)(n4 * n6), "-985008687907853269984665640564039457584007913129639936");
	ASSERT_EQ((string)(n6 * n4), "-985008687907853269984665640564039457584007913129639936");
	ASSERT_EQ((string)(n9 * n1), "-115792089237316195423570985008687907853269984665640564039457584007913129639936");
	ASSERT_EQ((string)(n9 * n10), "115792089237316195423570985008687907853269984665640564039457584007913129639935");
	ASSERT_EQ((string)(n9 * n2), "-115792089237316195423570985008687907853269984665640564039457584007913129639935");
	ASSERT_EQ((string)(n9 * n7), "731619542357098500868");
	ASSERT_EQ((string)(n1 * n9), "-115792089237316195423570985008687907853269984665640564039457584007913129639936");
	ASSERT_EQ((string)(n10 * n9), "115792089237316195423570985008687907853269984665640564039457584007913129639935");
	ASSERT_EQ((string)(n2 * n9), "-115792089237316195423570985008687907853269984665640564039457584007913129639935");
	ASSERT_EQ((string)(n7 * n9), "731619542357098500868");
}

